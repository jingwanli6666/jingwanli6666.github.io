<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[勤能补拙]]></title>
  <subtitle><![CDATA[生活不易，且行且珍惜]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-10-26T03:16:52.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[jasonjwl]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[自动打包.md]]></title>
    <link href="http://yoursite.com/2016/10/26/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2016/10/26/自动打包/</id>
    <published>2016-10-26T03:16:52.000Z</published>
    <updated>2016-10-26T03:16:52.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableView的优化技巧]]></title>
    <link href="http://yoursite.com/2016/08/31/UITableView%E7%9A%84%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2016/08/31/UITableView的优化技巧/</id>
    <published>2016-08-31T15:16:10.000Z</published>
    <updated>2016-10-31T13:03:38.000Z</updated>
    <content type="html"><![CDATA[<p>这段时间也看了很多关于tableview优化的文章，结合项目的一些实践 ，思考了一些关于UITableView化技巧。UITableView是iOS开发中最常用的控件之一。</p>
<h2 id="UITableView的简单认识"><a href="#UITableView的简单认识" class="headerlink" title="UITableView的简单认识"></a>UITableView的简单认识</h2><h3 id="1-重用机制"><a href="#1-重用机制" class="headerlink" title="1.重用机制"></a>1.重用机制</h3><p>UITableView最核心的思想就是UITableViewCell的重用机制。UITableView只会创建一屏的UITableViewCell，其他都是从中取出来重用的。每当Cell滑出屏幕时，就会放入到一个集合中，当要显示某一位置的Cell时，会先去集合中取，如果有，就直接重用显示。如果没有，才会创建，这样能极大的减少内存开销。</p>
<h3 id="2-代理方法"><a href="#2-代理方法" class="headerlink" title="2.代理方法"></a>2.代理方法</h3><p>UITableView最主要的两个代理方法<strong>tableView:cellForRowAtIndexPath:</strong>和<strong>tableView:heightForRowAtIndexPath:</strong>。我最开始接触UITableView的时候，认为UITableView会先调用前者，再调用后者，因为这跟我们创建控件的思路是一样的，先创建它，然后设置它的布局。但实际上并非如此，UITableView是继承自UIScrollView的，需要先确定它的<strong>contentSize</strong>及每个Cell的位置，然后才会把重用的Cell放置到对应的位置。所以事实上，UITableView的回调顺序是先多次调用<strong>tableView:heightForRowAtIndexPath:</strong>以确定contentSize及Cell的位置，然后才会调用<strong>tableView:cellForRowAtIndexPath:</strong>，来显示在当前屏幕的cell。<br>举个例子来说：如果现在要显示100个Cell，当前屏幕显示5个。刷新(reload)UITableView时，UITableView会先调用100次<strong>tableView:heightForRowAtIndexPath:</strong>方法，然后调用5次<strong>tableView:cellForRowAtIndexPath:</strong>方法；滚动屏幕时，每当Cell滚入屏幕，都会调用一次<strong>tableView:heightForRowAtIndexPath:</strong>、<strong>tableView:cellForRowAtIndexPath:</strong>方法。通过上述的讲解后，首先想到的UITableView优化的方案是优化上面的UITableView两个代理方法。</p>
<h2 id="优化技巧"><a href="#优化技巧" class="headerlink" title="优化技巧"></a>优化技巧</h2><h3 id="1-将赋值和计算布局分离，并根据数据源计算出对应的布局，并缓存到数据源中。"><a href="#1-将赋值和计算布局分离，并根据数据源计算出对应的布局，并缓存到数据源中。" class="headerlink" title="1.将赋值和计算布局分离，并根据数据源计算出对应的布局，并缓存到数据源中。"></a>1.将赋值和计算布局分离，并根据数据源计算出对应的布局，并缓存到数据源中。</h3><p>这样能让<strong>tableView:cellForRowAtIndexPath:</strong>方法只负责赋值，<strong>tableView:heightForRowAtIndexPath:</strong>方法只负责计算高度。示例代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;  </div><div class="line">    VVeboTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"cell"</span>];  </div><div class="line">    <span class="keyword">if</span> (cell==<span class="literal">nil</span>) &#123;  </div><div class="line">        cell = [[VVeboTableViewCell alloc] initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span>  </div><div class="line">                                         reuseIdentifier:<span class="string">@"cell"</span>];  </div><div class="line">    &#125;  </div><div class="line">    [<span class="keyword">self</span> drawCell:cell withIndexPath:indexPath];  </div><div class="line">    <span class="keyword">return</span> cell;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;  </div><div class="line">    <span class="built_in">NSDictionary</span> *dict = datas[indexPath.row];  </div><div class="line">    <span class="keyword">float</span> height = [dict[<span class="string">@"frame"</span>] <span class="built_in">CGRectValue</span>].size.height;  </div><div class="line">    <span class="keyword">return</span> height;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-预渲染"><a href="#2-预渲染" class="headerlink" title="2.预渲染"></a>2.预渲染</h3><p>微博的头像在某次改版中换成了圆形，当头像下载下来后。利用后台线程将头像预先渲染为圆形并保存到一个ImageCache中去。示例代码如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (YYWebImageManager *)avatarImageManager &#123;  </div><div class="line">    <span class="keyword">static</span> YYWebImageManager *manager;  </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;  </div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;  </div><div class="line">        <span class="built_in">NSString</span> *path = [[<span class="built_in">UIApplication</span> sharedApplication].cachesPath stringByAppendingPathComponent:<span class="string">@"weibo.avatar"</span>];  </div><div class="line">        YYImageCache *cache = [[YYImageCache alloc] initWithPath:path];  </div><div class="line">        manager = [[YYWebImageManager alloc] initWithCache:cache queue:[YYWebImageManager sharedManager].queue];  </div><div class="line">        manager.sharedTransformBlock = ^(<span class="built_in">UIImage</span> *image, <span class="built_in">NSURL</span> *url) &#123;  </div><div class="line">            <span class="keyword">if</span> (!image) <span class="keyword">return</span> image;  </div><div class="line">            <span class="keyword">return</span> [image imageByRoundCornerRadius:<span class="number">100</span>]; <span class="comment">// a large value  </span></div><div class="line">        &#125;;  </div><div class="line">    &#125;);  </div><div class="line">    <span class="keyword">return</span> manager;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于TableView来说，Cell内容的离屏渲染会带来较大的GPU消耗。为了避免离屏渲染，你应当尽量避免使用layer的border、corner、shadow、mask 等技术，而尽量在后台线程预先绘制好对应内容。</p>
<h3 id="3-当滚动停止时才加载可见cell的图片"><a href="#3-当滚动停止时才加载可见cell的图片" class="headerlink" title="3.当滚动停止时才加载可见cell的图片"></a>3.当滚动停止时才加载可见cell的图片</h3><p>在UITableView在滚动的过程中，最好不要做比较耗性能的操作(如图片的下载)，不然会导致滚动卡顿的现象。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)scrollViewDidEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView willDecelerate:(<span class="built_in">BOOL</span>)decelerate    </div><div class="line">&#123;    </div><div class="line">    <span class="keyword">if</span> (!decelerate)    </div><div class="line">    &#123;    </div><div class="line">        [<span class="keyword">self</span> loadImagesForOnscreenRows];    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-异步绘制"><a href="#4-异步绘制" class="headerlink" title="4.异步绘制"></a>4.异步绘制</h3><p>第三方库YYKit(GitHub地址:<a href="https://github.com/jingwanli6666/YYKit" title="YYKit库" target="_blank" rel="external">https://github.com/jingwanli6666/YYKit</a>)在显示文本的控件上用到了异步绘制的功能。YYKit参考了FaceBook的<a href="https://github.com/facebook/AsyncDisplayKit" title="AsyncDisplayKit" target="_blank" rel="external">AsyncDisplayKit</a>库，它是用于保持iOS界面流畅的库。关于这块代码作者单独提取出来，放到了这里：<a href="https://github.com/ibireme/YYAsyncLayer" title="YYAsyncLayer" target="_blank" rel="external">YYAsyncLayer</a>。YYAsyncLayer 是 CALayer 的子类，当它需要显示内容（比如调用了 <strong>[layer setNeedDisplay]</strong>）时，它会向 delegate，也就是 UIView 请求一个异步绘制的任务。在异步绘制时，Layer 会传递一个<strong>BOOL(^isCancelled)()</strong> 这样的 block，绘制代码可以随时调用该 block 判断绘制任务是否已经被取消。<br>当 TableView 快速滑动时，会有大量异步绘制任务提交到后台线程去执行。但是有时滑动速度过快时，绘制任务还没有完成就可能已经被取消了。如果这时仍然继续绘制，就会造成大量的 CPU 资源浪费，甚至阻塞线程并造成后续的绘制任务迟迟无法完成。我的做法是尽量快速、提前判断当前绘制任务是否已经被取消；在绘制每一行文本前，我都会调用 isCancelled() 来进行判断，保证被取消的任务能及时退出，不至于影响后续操作。<br>当我们在Cell上添加系统控件时，实质上系统都需要调用底层的接口进行绘制。当需要大量添加控件时，对资源的开销也会很大，如果我们直接绘制，就能提高效率。第三方微博客户端(VVebo)通过给自定义的Cell添加draw方法，来异步绘制Cell的系统控件。相关实现见这个项目：<a href="https://github.com/johnil/VVeboTableViewDemo" title="VVeboTableViewDemo" target="_blank" rel="external">VVeboTableViewDemo</a>，部分代码如下所示：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将主要内容绘制到图片上  </span></div><div class="line">- (<span class="keyword">void</span>)draw&#123;  </div><div class="line">    <span class="keyword">if</span> (drawed) &#123;  </div><div class="line">        <span class="keyword">return</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">NSInteger</span> flag = drawColorFlag;  </div><div class="line">    drawed = <span class="literal">YES</span>;  </div><div class="line">    <span class="comment">//异步绘制  </span></div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;  </div><div class="line">        <span class="built_in">CGRect</span> rect = [_data[<span class="string">@"frame"</span>] <span class="built_in">CGRectValue</span>];  </div><div class="line">        <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(rect.size, <span class="literal">YES</span>, <span class="number">0</span>);  </div><div class="line">        <span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();  </div><div class="line">        [[<span class="built_in">UIColor</span> colorWithRed:<span class="number">250</span>/<span class="number">255.0</span> green:<span class="number">250</span>/<span class="number">255.0</span> blue:<span class="number">250</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>] set];  </div><div class="line">        <span class="built_in">CGContextFillRect</span>(context, rect);  </div><div class="line">        <span class="keyword">if</span> ([_data valueForKey:<span class="string">@"subData"</span>]) &#123;  </div><div class="line">            [[<span class="built_in">UIColor</span> colorWithRed:<span class="number">243</span>/<span class="number">255.0</span> green:<span class="number">243</span>/<span class="number">255.0</span> blue:<span class="number">243</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>] set];  </div><div class="line">            <span class="built_in">CGRect</span> subFrame = [_data[<span class="string">@"subData"</span>][<span class="string">@"frame"</span>] <span class="built_in">CGRectValue</span>];  </div><div class="line">            <span class="built_in">CGContextFillRect</span>(context, subFrame);  </div><div class="line">            [[<span class="built_in">UIColor</span> colorWithRed:<span class="number">200</span>/<span class="number">255.0</span> green:<span class="number">200</span>/<span class="number">255.0</span> blue:<span class="number">200</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>] set];  </div><div class="line">            <span class="built_in">CGContextFillRect</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, subFrame.origin.y, rect.size.width, <span class="number">.5</span>));  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">float</span> leftX = SIZE_GAP_LEFT+SIZE_AVATAR+SIZE_GAP_BIG;  </div><div class="line">            <span class="keyword">float</span> x = leftX;  </div><div class="line">            <span class="keyword">float</span> y = (SIZE_AVATAR-(SIZE_FONT_NAME+SIZE_FONT_SUBTITLE+<span class="number">6</span>))/<span class="number">2</span><span class="number">-2</span>+SIZE_GAP_TOP+SIZE_GAP_SMALL<span class="number">-5</span>;  </div><div class="line">            [_data[<span class="string">@"name"</span>] drawInContext:context withPosition:<span class="built_in">CGPointMake</span>(x, y) andFont:FontWithSize(SIZE_FONT_NAME)  </div><div class="line">                             andTextColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">106</span>/<span class="number">255.0</span> green:<span class="number">140</span>/<span class="number">255.0</span> blue:<span class="number">181</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>]  </div><div class="line">                                andHeight:rect.size.height];  </div><div class="line">            y += SIZE_FONT_NAME+<span class="number">5</span>;  </div><div class="line">            <span class="keyword">float</span> fromX = leftX;  </div><div class="line">            <span class="keyword">float</span> size = [<span class="built_in">UIScreen</span> screenWidth]-leftX;  </div><div class="line">            <span class="built_in">NSString</span> *from = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@  %@"</span>, _data[<span class="string">@"time"</span>], _data[<span class="string">@"from"</span>]];  </div><div class="line">            [from drawInContext:context withPosition:<span class="built_in">CGPointMake</span>(fromX, y) andFont:FontWithSize(SIZE_FONT_SUBTITLE)  </div><div class="line">                   andTextColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">178</span>/<span class="number">255.0</span> green:<span class="number">178</span>/<span class="number">255.0</span> blue:<span class="number">178</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>]  </div><div class="line">                      andHeight:rect.size.height andWidth:size];  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">            [<span class="string">@"•••"</span> drawInContext:context  </div><div class="line">                     withPosition:<span class="built_in">CGPointMake</span>(SIZE_GAP_LEFT, <span class="number">8</span>+countRect.origin.y)  </div><div class="line">                          andFont:FontWithSize(<span class="number">11</span>)  </div><div class="line">                     andTextColor:[<span class="built_in">UIColor</span> colorWithRed:<span class="number">178</span>/<span class="number">255.0</span> green:<span class="number">178</span>/<span class="number">255.0</span> blue:<span class="number">178</span>/<span class="number">255.0</span> alpha:<span class="number">.5</span>]  </div><div class="line">                        andHeight:rect.size.height];  </div><div class="line">              </div><div class="line">            <span class="keyword">if</span> ([_data valueForKey:<span class="string">@"subData"</span>]) &#123;  </div><div class="line">                [[<span class="built_in">UIColor</span> colorWithRed:<span class="number">200</span>/<span class="number">255.0</span> green:<span class="number">200</span>/<span class="number">255.0</span> blue:<span class="number">200</span>/<span class="number">255.0</span> alpha:<span class="number">1</span>] set];  </div><div class="line">                <span class="built_in">CGContextFillRect</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, rect.size.height<span class="number">-30.5</span>, rect.size.width, <span class="number">.5</span>));  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">//将绘制的内容以图片的形式返回，并调用主线程显示  </span></div><div class="line">        <span class="built_in">UIImage</span> *temp = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();  </div><div class="line">        <span class="built_in">UIGraphicsEndImageContext</span>();  </div><div class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;  </div><div class="line">            <span class="keyword">if</span> (flag==drawColorFlag) &#123;  </div><div class="line">                postBGView.frame = rect;  </div><div class="line">                postBGView.image = <span class="literal">nil</span>;  </div><div class="line">                postBGView.image = temp;  </div><div class="line">            &#125;  </div><div class="line">        &#125;);  </div><div class="line">    &#125;);  </div><div class="line">    [<span class="keyword">self</span> drawText];  </div><div class="line">    [<span class="keyword">self</span> loadThumb];  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//将文本内容绘制到图片上  </span></div><div class="line">- (<span class="keyword">void</span>)drawText&#123;  </div><div class="line">    <span class="keyword">if</span> (label==<span class="literal">nil</span>||detailLabel==<span class="literal">nil</span>) &#123;  </div><div class="line">        [<span class="keyword">self</span> addLabel];  </div><div class="line">    &#125;  </div><div class="line">    label.frame = [_data[<span class="string">@"textRect"</span>] <span class="built_in">CGRectValue</span>];  </div><div class="line">    [label setText:_data[<span class="string">@"text"</span>]];  </div><div class="line">    <span class="keyword">if</span> ([_data valueForKey:<span class="string">@"subData"</span>]) &#123;  </div><div class="line">        detailLabel.frame = [[_data valueForKey:<span class="string">@"subData"</span>][<span class="string">@"textRect"</span>] <span class="built_in">CGRectValue</span>];  </div><div class="line">        [detailLabel setText:[_data valueForKey:<span class="string">@"subData"</span>][<span class="string">@"text"</span>]];  </div><div class="line">        detailLabel.hidden = <span class="literal">NO</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>各个部分都是根据之前算好的布局进行绘制。这里需要异步绘制，但如果在重写drawRect方法就不需要用GCD异步线程了，因为drawRect本身就是异步绘制。</p>
<h3 id="5-按需加载"><a href="#5-按需加载" class="headerlink" title="5.按需加载"></a>5.按需加载</h3><p>当滑动时，松开手指后，立刻计算出滑动停止时Cell的位置，并预先绘制那个位置附近的几个Cell，而忽略当前滑动中从Cell。代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按需加载 - 如果目标行与当前行相差超过指定行数，只在目标滚动范围的前后指定3行加载。  </span></div><div class="line">- (<span class="keyword">void</span>)scrollViewWillEndDragging:(<span class="built_in">UIScrollView</span> *)scrollView withVelocity:(<span class="built_in">CGPoint</span>)velocity targetContentOffset:(<span class="keyword">inout</span> <span class="built_in">CGPoint</span> *)targetContentOffset&#123;  </div><div class="line">    <span class="built_in">NSIndexPath</span> *ip = [<span class="keyword">self</span> indexPathForRowAtPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, targetContentOffset-&gt;y)];  </div><div class="line">    <span class="built_in">NSIndexPath</span> *cip = [[<span class="keyword">self</span> indexPathsForVisibleRows] firstObject];  </div><div class="line">    <span class="built_in">NSInteger</span> skipCount = <span class="number">8</span>;  </div><div class="line">    <span class="keyword">if</span> (labs(cip.row-ip.row)&gt;skipCount) &#123;  </div><div class="line">        <span class="built_in">NSArray</span> *temp = [<span class="keyword">self</span> indexPathsForRowsInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, targetContentOffset-&gt;y, <span class="keyword">self</span>.width, <span class="keyword">self</span>.height)];  </div><div class="line">        <span class="built_in">NSMutableArray</span> *arr = [<span class="built_in">NSMutableArray</span> arrayWithArray:temp];  </div><div class="line">        <span class="keyword">if</span> (velocity.y&lt;<span class="number">0</span>) &#123;  </div><div class="line">            <span class="built_in">NSIndexPath</span> *indexPath = [temp lastObject];  </div><div class="line">            <span class="keyword">if</span> (indexPath.row+<span class="number">3</span>&lt;datas.count) &#123;  </div><div class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath.row+<span class="number">1</span> inSection:<span class="number">0</span>]];  </div><div class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath.row+<span class="number">2</span> inSection:<span class="number">0</span>]];  </div><div class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath.row+<span class="number">3</span> inSection:<span class="number">0</span>]];  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="built_in">NSIndexPath</span> *indexPath = [temp firstObject];  </div><div class="line">            <span class="keyword">if</span> (indexPath.row&gt;<span class="number">3</span>) &#123;  </div><div class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath.row<span class="number">-3</span> inSection:<span class="number">0</span>]];  </div><div class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath.row<span class="number">-2</span> inSection:<span class="number">0</span>]];  </div><div class="line">                [arr addObject:[<span class="built_in">NSIndexPath</span> indexPathForRow:indexPath.row<span class="number">-1</span> inSection:<span class="number">0</span>]];  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        [needLoadArr addObjectsFromArray:arr];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-全局并发控制"><a href="#6-全局并发控制" class="headerlink" title="6.全局并发控制"></a>6.全局并发控制</h3><p>大量的任务提交到后台队列时，某些任务会因为某些原因（如 CGFont锁）被锁住导致线程休眠，或者被阻塞，concurrent queue 随后会创建新的线程来执行其他任务。当这种情况变多时，或者 App 中使用了大量 concurrent queue 来执行较多任务时，App 在同一时刻就会存在几十个线程同时运行、创建、销毁。CPU 是用时间片轮转来实现线程并发的，尽管 concurrent queue 能控制线程的优先级，但当大量线程同时创建运行销毁时，这些操作仍然会挤占掉主线程的 CPU 资源。ASDK 有个 Feed 列表的 Demo：<a href="https://github.com/facebook/AsyncDisplayKit/tree/master/examples/SocialAppLayout" title="SocialAppLayout" target="_blank" rel="external">SocialAppLayout</a>，当列表内 Cell 过多，并且非常快速的滑动时，界面仍然会出现少量卡顿，我谨慎的猜测可能与这个问题有关。<br>使用 concurrent queue 时不可避免会遇到这种问题，但使用 serial queue 又不能充分利用多核 CPU 的资源。我写了一个简单的工具 <a href="https://github.com/ibireme/YYDispatchQueuePool" title="YYDispatchQueuePool" target="_blank" rel="external">YYDispatchQueuePool</a>，为不同优先级创建和 CPU 数量相同的 serial queue，每次从 pool 中获取 queue 时，会轮询返回其中一个 queue。我把 App 内所有异步操作，包括图像解码、对象释放、异步绘制等，都按优先级不同放入了全局的 serial queue 中执行，这样尽量避免了过多线程导致的性能问题。</p>
<h3 id="7-预加载-iOS10"><a href="#7-预加载-iOS10" class="headerlink" title="7. 预加载(iOS10)"></a>7. 预加载(iOS10)</h3><h4 id="7-1-UICollectionView修改了cell的生命周期，增加了pre-fetch-预加载-功能"><a href="#7-1-UICollectionView修改了cell的生命周期，增加了pre-fetch-预加载-功能" class="headerlink" title="7.1 UICollectionView修改了cell的生命周期，增加了pre-fetch(预加载)功能"></a>7.1 UICollectionView修改了cell的生命周期，增加了pre-fetch(预加载)功能</h4><p>iOS10以前，UICollectionView cell生命周期</p>
<blockquote>
<p> <strong>cell即将出现，马上要使用的时候</strong></p>
<ul>
<li>prepareForReuse cell重置及恢复默认状态，准备接受新数据</li>
<li>cellForItemAtIndexPath  将数据填充到cell上</li>
<li>willDisplayCell为cell展示做最后的工作</li>
</ul>
<p><strong>cell消失</strong></p>
<ul>
<li>didEndDisplayingCell</li>
<li>进入reuse queue</li>
</ul>
</blockquote>
<p>iOS10，UICollectionView cell生命周期</p>
<blockquote>
<p><strong>cell  预加载</strong></p>
<ul>
<li>prefetchItemsAtIndexPaths  cell还没进入屏幕</li>
</ul>
<p><strong>cell即将出现，马上要使用的时候</strong></p>
<ul>
<li>prepareForReuse cell重置及恢复默认状态，准备接受新数据</li>
<li>cellForItemAtIndexPath  将数据填充到cell上</li>
<li>willDisplayCell为cell展示做最后的工作</li>
</ul>
<p><strong>cell消失</strong></p>
<ul>
<li>didEndDisplayingCell</li>
<li>暂缓进入reuse queue</li>
</ul>
</blockquote>
<h4 id="7-2-UITableView"><a href="#7-2-UITableView" class="headerlink" title="7.2 UITableView"></a>7.2 UITableView</h4><p>新增加了一个protocol,以及两个代理方法</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">UITableViewDataSourcePrefetching</span>&gt; prefetchDataSource <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div><div class="line"> <span class="class"><span class="keyword">@protocol</span> <span class="title">UITableViewDataSourcePrefetching</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"> <span class="keyword">@required</span></div><div class="line"> - (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView prefetchRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths;</div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"> - (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *) tableView cancelPrefetchingForRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths;</div></pre></td></tr></table></figure>
<p>除了上述提到的几个方面外，还有一些大家都比较熟悉的优化点：</p>
<ul>
<li>正确使用重用机制</li>
<li>尽量少用或者不用透明图层</li>
<li>减少subviews的数量</li>
<li>如果Cell内部的内容来自web，使用异步加载，缓存请求结果</li>
</ul>
<h3 id="如何评测界面的流畅度"><a href="#如何评测界面的流畅度" class="headerlink" title="如何评测界面的流畅度"></a>如何评测界面的流畅度</h3><p>屏幕的刷新频率为60HZ，当列表快速滑动时仍能保持屏幕刷新频率为50~60FPS，则说明滑动比较顺畅。可以利用FPS指示器：<a href="https://github.com/ibireme/YYText/blob/master/Demo/YYTextDemo/YYFPSLabel.m" title="FPSLabel" target="_blank" rel="external">FPSLabel</a>来监视CPU的卡顿问题。</p>
<p>github地址:<a href="https://github.com/jingwanli6666/OpenResource/" title="下载地址" target="_blank" rel="external">https://github.com/jingwanli6666/OpenResource/</a></p>
<p>参考文献：<br><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" title="iOS 保持界面流畅的技巧" target="_blank" rel="external">iOS 保持界面流畅的技巧</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这段时间也看了很多关于tableview优化的文章，结合项目的一些实践 ，思考了一些关于UITableView化技巧。UITableView是iOS开发中最常用的控件之一。</p>
<h2 id="UITableView的简单认识"><a href="#UITableVie]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[国内iOS牛人博客]]></title>
    <link href="http://yoursite.com/2016/04/25/%E5%9B%BD%E5%86%85iOS%E7%89%9B%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/04/25/国内iOS牛人博客/</id>
    <published>2016-04-25T15:16:52.000Z</published>
    <updated>2016-10-29T07:46:06.000Z</updated>
    <content type="html"><![CDATA[<h4 id="李忠-limboy-来自蘑菇街，RAC实践的国内先驱者"><a href="#李忠-limboy-来自蘑菇街，RAC实践的国内先驱者" class="headerlink" title="李忠(limboy):来自蘑菇街，RAC实践的国内先驱者"></a>李忠(limboy):来自蘑菇街，RAC实践的国内先驱者</h4><p><strong><a href="http://limboy.me/" title="李忠的博客" target="_blank" rel="external">http://limboy.me/</a></strong></p>
<h4 id="Bang的博客：目前就职于腾讯，JSPatch作者"><a href="#Bang的博客：目前就职于腾讯，JSPatch作者" class="headerlink" title="Bang的博客：目前就职于腾讯，JSPatch作者"></a>Bang的博客：目前就职于腾讯，JSPatch作者</h4><p><strong><a href="http://blog.cnbang.net/" title="Bang的博客" target="_blank" rel="external">http://blog.cnbang.net/</a></strong></p>
<h4 id="王巍的博客：王巍目前在日本横滨任职于LINE。工作内容主要进行Unity3D开发和iOS开发。他维护Swift使用技巧分享网站Swifter-tips-他的陈列柜中已有多款应用，其中番茄工作法工具非常棒。"><a href="#王巍的博客：王巍目前在日本横滨任职于LINE。工作内容主要进行Unity3D开发和iOS开发。他维护Swift使用技巧分享网站Swifter-tips-他的陈列柜中已有多款应用，其中番茄工作法工具非常棒。" class="headerlink" title="王巍的博客：王巍目前在日本横滨任职于LINE。工作内容主要进行Unity3D开发和iOS开发。他维护Swift使用技巧分享网站Swifter.tips,他的陈列柜中已有多款应用，其中番茄工作法工具非常棒。"></a>王巍的博客：王巍目前在日本横滨任职于LINE。工作内容主要进行Unity3D开发和iOS开发。他维护Swift使用技巧分享网站Swifter.tips,他的陈列柜中已有多款应用，其中番茄工作法工具非常棒。</h4><p><strong><a href="http://onevcat.com" title="王巍的博客" target="_blank" rel="external">http://onevcat.com</a></strong></p>
<h4 id="池建强的博客：-池建强，70后程序员，Blogger。98年毕业，先后就职于洪恩软件、RocketSofeware和用友软件工程公司（后更名为瑞友科技），现任瑞友科技IT应用研究院副院长。该博客最初每天发送一条Mac技巧，不过目前已经形成了一种技术和人文结合的风格，时而随笔，时而技术。"><a href="#池建强的博客：-池建强，70后程序员，Blogger。98年毕业，先后就职于洪恩软件、RocketSofeware和用友软件工程公司（后更名为瑞友科技），现任瑞友科技IT应用研究院副院长。该博客最初每天发送一条Mac技巧，不过目前已经形成了一种技术和人文结合的风格，时而随笔，时而技术。" class="headerlink" title="池建强的博客： 池建强，70后程序员，Blogger。98年毕业，先后就职于洪恩软件、RocketSofeware和用友软件工程公司（后更名为瑞友科技），现任瑞友科技IT应用研究院副院长。该博客最初每天发送一条Mac技巧，不过目前已经形成了一种技术和人文结合的风格，时而随笔，时而技术。"></a>池建强的博客： 池建强，70后程序员，Blogger。98年毕业，先后就职于洪恩软件、RocketSofeware和用友软件工程公司（后更名为瑞友科技），现任瑞友科技IT应用研究院副院长。该博客最初每天发送一条Mac技巧，不过目前已经形成了一种技术和人文结合的风格，时而随笔，时而技术。</h4><p><strong><a href="http://macshuo.com/" title="池建强的博客" target="_blank" rel="external">http://macshuo.com/</a></strong></p>
<h4 id="唐巧的博客：-唐巧是前网易有道员工，现在在猿题库创业中，负责iOS端的开发，首届国内Swift开发者大会的组织者。"><a href="#唐巧的博客：-唐巧是前网易有道员工，现在在猿题库创业中，负责iOS端的开发，首届国内Swift开发者大会的组织者。" class="headerlink" title="唐巧的博客： 唐巧是前网易有道员工，现在在猿题库创业中，负责iOS端的开发，首届国内Swift开发者大会的组织者。"></a>唐巧的博客： 唐巧是前网易有道员工，现在在猿题库创业中，负责iOS端的开发，首届国内Swift开发者大会的组织者。</h4><p><strong><a href="http://blog.devtang.com/" title="唐巧的博客" target="_blank" rel="external">http://blog.devtang.com/</a></strong></p>
<hr>
<h4 id="许小帅的博客：许小帅目前任职于腾讯，他还是iOS-Feed站点的负责人。博客中对支付宝钱包插件分析的文章，引起了支付宝开发团队的反思，大家可以去感受一下。"><a href="#许小帅的博客：许小帅目前任职于腾讯，他还是iOS-Feed站点的负责人。博客中对支付宝钱包插件分析的文章，引起了支付宝开发团队的反思，大家可以去感受一下。" class="headerlink" title="许小帅的博客：许小帅目前任职于腾讯，他还是iOS Feed站点的负责人。博客中对支付宝钱包插件分析的文章，引起了支付宝开发团队的反思，大家可以去感受一下。"></a>许小帅的博客：许小帅目前任职于腾讯，他还是iOS Feed站点的负责人。博客中对支付宝钱包插件分析的文章，引起了支付宝开发团队的反思，大家可以去感受一下。</h4><p><strong><a href="http://imallen.com/" title="许小帅的博客" target="_blank" rel="external">http://imallen.com/</a></strong></p>
<h4 id="蓝晨钰的博客：晨钰就职于猿题库。"><a href="#蓝晨钰的博客：晨钰就职于猿题库。" class="headerlink" title="蓝晨钰的博客：晨钰就职于猿题库。"></a>蓝晨钰的博客：晨钰就职于猿题库。</h4><p><strong><a href="http://gracelancy.com/" title="蓝晨钰的博客" target="_blank" rel="external">http://gracelancy.com/</a></strong></p>
<h4 id="萧宸宇的博客：萧宸宇目前任职于Sumi-Interactive。他出生于西南一个边陲小镇，梦想着能走出家乡，看看祖国的大好河山。他拥有丰富的-iOS-开发经验，在他的博客中发表了许多-iOS-开发的文章。"><a href="#萧宸宇的博客：萧宸宇目前任职于Sumi-Interactive。他出生于西南一个边陲小镇，梦想着能走出家乡，看看祖国的大好河山。他拥有丰富的-iOS-开发经验，在他的博客中发表了许多-iOS-开发的文章。" class="headerlink" title="萧宸宇的博客：萧宸宇目前任职于Sumi Interactive。他出生于西南一个边陲小镇，梦想着能走出家乡，看看祖国的大好河山。他拥有丰富的 iOS 开发经验，在他的博客中发表了许多 iOS 开发的文章。"></a>萧宸宇的博客：萧宸宇目前任职于Sumi Interactive。他出生于西南一个边陲小镇，梦想着能走出家乡，看看祖国的大好河山。他拥有丰富的 iOS 开发经验，在他的博客中发表了许多 iOS 开发的文章。</h4><p><strong><a href="http://iiiyu.com/" title="萧宸宇的博客" target="_blank" rel="external">http://iiiyu.com/</a></strong></p>
<h4 id="陶丰平的博客：陶丰平目前任职于花瓣网，喜欢技术，喜欢音乐。他在软件开发领域有丰富的开发经验。"><a href="#陶丰平的博客：陶丰平目前任职于花瓣网，喜欢技术，喜欢音乐。他在软件开发领域有丰富的开发经验。" class="headerlink" title="陶丰平的博客：陶丰平目前任职于花瓣网，喜欢技术，喜欢音乐。他在软件开发领域有丰富的开发经验。"></a>陶丰平的博客：陶丰平目前任职于花瓣网，喜欢技术，喜欢音乐。他在软件开发领域有丰富的开发经验。</h4><p><strong><a href="http://www.taofengping.com/" title="陶丰平的博客" target="_blank" rel="external">http://www.taofengping.com/</a></strong></p>
<h4 id="ibireme的博客：YYKit作者-曾就职于优酷土豆-先就职于滴滴"><a href="#ibireme的博客：YYKit作者-曾就职于优酷土豆-先就职于滴滴" class="headerlink" title="ibireme的博客：YYKit作者 曾就职于优酷土豆,先就职于滴滴"></a>ibireme的博客：YYKit作者 曾就职于优酷土豆,先就职于滴滴</h4><p><strong><a href="http://blog.ibireme.com" title="ibireme的博客" target="_blank" rel="external">http://blog.ibireme.com</a></strong></p>
<hr>
<h4 id="乔学士的博客：乔学士目前任职于创业公司拓词，他正在为成为“代码手工艺人”而努力，目前主要进行-iOS-开发。最近他做得非常精彩的一件事就是汇总了WWDC-2013-视频英文字幕下载，大家可以前往他的博客感受一下。"><a href="#乔学士的博客：乔学士目前任职于创业公司拓词，他正在为成为“代码手工艺人”而努力，目前主要进行-iOS-开发。最近他做得非常精彩的一件事就是汇总了WWDC-2013-视频英文字幕下载，大家可以前往他的博客感受一下。" class="headerlink" title="乔学士的博客：乔学士目前任职于创业公司拓词，他正在为成为“代码手工艺人”而努力，目前主要进行 iOS 开发。最近他做得非常精彩的一件事就是汇总了WWDC 2013 视频英文字幕下载，大家可以前往他的博客感受一下。"></a>乔学士的博客：乔学士目前任职于创业公司拓词，他正在为成为“代码手工艺人”而努力，目前主要进行 iOS 开发。最近他做得非常精彩的一件事就是汇总了WWDC 2013 视频英文字幕下载，大家可以前往他的博客感受一下。</h4><p><strong><a href="http://joeyio.com/" title="乔学士的博客" target="_blank" rel="external">http://joeyio.com/</a></strong></p>
<h4 id="破船的博客：破船在移动领域摸爬滚打多年，经历了Symbian、Windows-Mobile、Windows-Phone和-iOS-等的洗礼。他希望能充分利用业余时间，努力做一名伪步道师。"><a href="#破船的博客：破船在移动领域摸爬滚打多年，经历了Symbian、Windows-Mobile、Windows-Phone和-iOS-等的洗礼。他希望能充分利用业余时间，努力做一名伪步道师。" class="headerlink" title="破船的博客：破船在移动领域摸爬滚打多年，经历了Symbian、Windows Mobile、Windows Phone和 iOS 等的洗礼。他希望能充分利用业余时间，努力做一名伪步道师。"></a>破船的博客：破船在移动领域摸爬滚打多年，经历了Symbian、Windows Mobile、Windows Phone和 iOS 等的洗礼。他希望能充分利用业余时间，努力做一名伪步道师。</h4><p><strong><a href="http://beyondvincent.com/" title="破船的博客" target="_blank" rel="external">http://beyondvincent.com/</a></strong></p>
<h4 id="陈咏聪的博客：陈咏聪现任职于百度，从事-iOS-相关开发。他热爱Web事业，关注设计、产品、开发。沉迷代码，无法自拔。"><a href="#陈咏聪的博客：陈咏聪现任职于百度，从事-iOS-相关开发。他热爱Web事业，关注设计、产品、开发。沉迷代码，无法自拔。" class="headerlink" title="陈咏聪的博客：陈咏聪现任职于百度，从事 iOS 相关开发。他热爱Web事业，关注设计、产品、开发。沉迷代码，无法自拔。"></a>陈咏聪的博客：陈咏聪现任职于百度，从事 iOS 相关开发。他热爱Web事业，关注设计、产品、开发。沉迷代码，无法自拔。</h4><p><strong><a href="http://vinqon.com/" title="陈咏聪的博客" target="_blank" rel="external">http://vinqon.com/</a></strong></p>
<h4 id="骆仕恺的博客：骆仕恺目前任职于爱折客-爱美味。他主要从事-iOS-和Java开发。拥有丰富的-iOS-开发经验。"><a href="#骆仕恺的博客：骆仕恺目前任职于爱折客-爱美味。他主要从事-iOS-和Java开发。拥有丰富的-iOS-开发经验。" class="headerlink" title="骆仕恺的博客：骆仕恺目前任职于爱折客 / 爱美味。他主要从事 iOS 和Java开发。拥有丰富的 iOS 开发经验。"></a>骆仕恺的博客：骆仕恺目前任职于爱折客 / 爱美味。他主要从事 iOS 和Java开发。拥有丰富的 iOS 开发经验。</h4><p><strong><a href="http://luosky.com/" title="骆仕恺的博客" target="_blank" rel="external">http://luosky.com/</a></strong></p>
<h4 id="耿健桓的博客：耿健桓目前在清华大学攻读硕士，之前他是著名站点知乎的-iOS-技术主管。"><a href="#耿健桓的博客：耿健桓目前在清华大学攻读硕士，之前他是著名站点知乎的-iOS-技术主管。" class="headerlink" title="耿健桓的博客：耿健桓目前在清华大学攻读硕士，之前他是著名站点知乎的 iOS 技术主管。"></a>耿健桓的博客：耿健桓目前在清华大学攻读硕士，之前他是著名站点知乎的 iOS 技术主管。</h4><p><strong><a href="http://dlog.dismory.com/" title="耿健桓的博客" target="_blank" rel="external">http://dlog.dismory.com/</a></strong></p>
<hr>
<h4 id="李择一的博客：李择一目前任职于百度，他在移动开发领域积累了丰富的经验，特别是iOS开发关于OC中block的追究非常有深度"><a href="#李择一的博客：李择一目前任职于百度，他在移动开发领域积累了丰富的经验，特别是iOS开发关于OC中block的追究非常有深度" class="headerlink" title="李择一的博客：李择一目前任职于百度，他在移动开发领域积累了丰富的经验，特别是iOS开发关于OC中block的追究非常有深度"></a>李择一的博客：李择一目前任职于百度，他在移动开发领域积累了丰富的经验，特别是iOS开发关于OC中block的追究非常有深度</h4><p><strong><a href="http://cnblogs.com/biosli" title="李择一的博客" target="_blank" rel="external">http://cnblogs.com/biosli</a></strong></p>
<h4 id="王轲的博客：王轲是一名iOS独立开发者，也是IndieBros-Studio创始人。在博客中有几篇关于-iOS-性能优化的文章，值得大家去看看。"><a href="#王轲的博客：王轲是一名iOS独立开发者，也是IndieBros-Studio创始人。在博客中有几篇关于-iOS-性能优化的文章，值得大家去看看。" class="headerlink" title="王轲的博客：王轲是一名iOS独立开发者，也是IndieBros Studio创始人。在博客中有几篇关于 iOS 性能优化的文章，值得大家去看看。"></a>王轲的博客：王轲是一名iOS独立开发者，也是IndieBros Studio创始人。在博客中有几篇关于 iOS 性能优化的文章，值得大家去看看。</h4><p><strong><a href="http://www.iwangke.me/" title="王轲的博客" target="_blank" rel="external">http://www.iwangke.me/</a></strong></p>
<h4 id="杨宇建的博客：-杨宇建目前任职于载信软件。在他的博客中有许多-iOS-开发的文章，都是干货。"><a href="#杨宇建的博客：-杨宇建目前任职于载信软件。在他的博客中有许多-iOS-开发的文章，都是干货。" class="headerlink" title="杨宇建的博客： 杨宇建目前任职于载信软件。在他的博客中有许多 iOS 开发的文章，都是干货。"></a>杨宇建的博客： 杨宇建目前任职于载信软件。在他的博客中有许多 iOS 开发的文章，都是干货。</h4><p><strong><a href="http://www.cnblogs.com/easonoutlook/" title="杨宇建的博客" target="_blank" rel="external">http://www.cnblogs.com/easonoutlook/</a></strong></p>
<h4 id="连栩的博客：-连栩目前工作在加拿大温哥华，运营着自己的公司-Beyondcow，他是一名-OSX、iOS-程序员同时也是用户体验，交互界面设计师。在开发的软件-Miao-是一款全功能-Mac-微博客户端。他的博客中有许多Cocoa开发的文章，值得大家去品读。"><a href="#连栩的博客：-连栩目前工作在加拿大温哥华，运营着自己的公司-Beyondcow，他是一名-OSX、iOS-程序员同时也是用户体验，交互界面设计师。在开发的软件-Miao-是一款全功能-Mac-微博客户端。他的博客中有许多Cocoa开发的文章，值得大家去品读。" class="headerlink" title="连栩的博客： 连栩目前工作在加拿大温哥华，运营着自己的公司 Beyondcow，他是一名 OSX、iOS 程序员同时也是用户体验，交互界面设计师。在开发的软件 Miao 是一款全功能 Mac 微博客户端。他的博客中有许多Cocoa开发的文章，值得大家去品读。"></a>连栩的博客： 连栩目前工作在加拿大温哥华，运营着自己的公司 Beyondcow，他是一名 OSX、iOS 程序员同时也是用户体验，交互界面设计师。在开发的软件 Miao 是一款全功能 Mac 微博客户端。他的博客中有许多Cocoa开发的文章，值得大家去品读。</h4><p><strong><a href="http://lianxu.me/" title="连栩的博客" target="_blank" rel="external">http://lianxu.me/</a></strong></p>
<h4 id="高嘉峻的博客：高嘉峻目前任职于天猫。是一名资深80后，号称会写代码的猪。最近他的博客中出现了两篇关于iOS中单元测试的文章，非常棒。"><a href="#高嘉峻的博客：高嘉峻目前任职于天猫。是一名资深80后，号称会写代码的猪。最近他的博客中出现了两篇关于iOS中单元测试的文章，非常棒。" class="headerlink" title="高嘉峻的博客：高嘉峻目前任职于天猫。是一名资深80后，号称会写代码的猪。最近他的博客中出现了两篇关于iOS中单元测试的文章，非常棒。"></a>高嘉峻的博客：高嘉峻目前任职于天猫。是一名资深80后，号称会写代码的猪。最近他的博客中出现了两篇关于iOS中单元测试的文章，非常棒。</h4><p><strong><a href="http://jiajun.org/" title="高嘉峻的博客" target="_blank" rel="external">http://jiajun.org/</a></strong></p>
<hr>
<h4 id="webfrogs的博客：目前在北京当一枚程序猿，有幸成为80后的尾巴。目前行走在iOS开发的道路上，用博客记载一路上的所见所闻所想。"><a href="#webfrogs的博客：目前在北京当一枚程序猿，有幸成为80后的尾巴。目前行走在iOS开发的道路上，用博客记载一路上的所见所闻所想。" class="headerlink" title="webfrogs的博客：目前在北京当一枚程序猿，有幸成为80后的尾巴。目前行走在iOS开发的道路上，用博客记载一路上的所见所闻所想。"></a>webfrogs的博客：目前在北京当一枚程序猿，有幸成为80后的尾巴。目前行走在iOS开发的道路上，用博客记载一路上的所见所闻所想。</h4><p><strong><a href="http://webfrogs.me/" title="webfrogs的博客" target="_blank" rel="external">http://webfrogs.me/</a></strong></p>
<h4 id="sunny的博客：现就职于北京滴滴，喜欢研究底层的东西，对runtime有深刻讲解，值得大家学习"><a href="#sunny的博客：现就职于北京滴滴，喜欢研究底层的东西，对runtime有深刻讲解，值得大家学习" class="headerlink" title="sunny的博客：现就职于北京滴滴，喜欢研究底层的东西，对runtime有深刻讲解，值得大家学习"></a>sunny的博客：现就职于北京滴滴，喜欢研究底层的东西，对runtime有深刻讲解，值得大家学习</h4><p><strong><a href="http://blog.sunnyxx.com" title="sunny的博客" target="_blank" rel="external">http://blog.sunnyxx.com</a></strong></p>
<h4 id="景总的博客：目前任职于天猫国际移动开发CTO，曾就职于平安科技项目经理，对IM和APP性能优化有深刻见解"><a href="#景总的博客：目前任职于天猫国际移动开发CTO，曾就职于平安科技项目经理，对IM和APP性能优化有深刻见解" class="headerlink" title="景总的博客：目前任职于天猫国际移动开发CTO，曾就职于平安科技项目经理，对IM和APP性能优化有深刻见解"></a>景总的博客：目前任职于天猫国际移动开发CTO，曾就职于平安科技项目经理，对IM和APP性能优化有深刻见解</h4><p><strong><a href="http://blog.csdn.net/justinjing0612" title="景总的博客" target="_blank" rel="external">http://blog.csdn.net/justinjing0612</a></strong></p>
<h4 id="谭灏的博客：目前就职于腾讯mac管家部门，他是一名-OSX、iOS-程序员，他的博客中有许多mac，ios开发的文章，值得大家去品读"><a href="#谭灏的博客：目前就职于腾讯mac管家部门，他是一名-OSX、iOS-程序员，他的博客中有许多mac，ios开发的文章，值得大家去品读" class="headerlink" title="谭灏的博客：目前就职于腾讯mac管家部门，他是一名 OSX、iOS 程序员，他的博客中有许多mac，ios开发的文章，值得大家去品读"></a>谭灏的博客：目前就职于腾讯mac管家部门，他是一名 OSX、iOS 程序员，他的博客中有许多mac，ios开发的文章，值得大家去品读</h4><p><strong><a href="http://tanhao.me/" title="谭灏的博客" target="_blank" rel="external">http://tanhao.me/</a></strong></p>
<h4 id="田伟宇的博客：目前任职于天猫，全能人才。最近他的博客中出现了篇关于iOS应用架构详谈的文章，非常棒。"><a href="#田伟宇的博客：目前任职于天猫，全能人才。最近他的博客中出现了篇关于iOS应用架构详谈的文章，非常棒。" class="headerlink" title="田伟宇的博客：目前任职于天猫，全能人才。最近他的博客中出现了篇关于iOS应用架构详谈的文章，非常棒。"></a>田伟宇的博客：目前任职于天猫，全能人才。最近他的博客中出现了篇关于iOS应用架构详谈的文章，非常棒。</h4><p><strong><a href="http://casatwy.com" title="田伟宇的博客" target="_blank" rel="external">http://casatwy.com</a></strong></p>
<hr>
<h4 id="吴茜的博客：目前就职阿里旗下蚂蚁金服，ios界女神，Qt、Android高级开发工程师-eoe优亿认证开发者，ios反编译大师，著作ios安全攻防"><a href="#吴茜的博客：目前就职阿里旗下蚂蚁金服，ios界女神，Qt、Android高级开发工程师-eoe优亿认证开发者，ios反编译大师，著作ios安全攻防" class="headerlink" title="吴茜的博客：目前就职阿里旗下蚂蚁金服，ios界女神，Qt、Android高级开发工程师,eoe优亿认证开发者，ios反编译大师，著作ios安全攻防"></a>吴茜的博客：目前就职阿里旗下蚂蚁金服，ios界女神，Qt、Android高级开发工程师,eoe优亿认证开发者，ios反编译大师，著作ios安全攻防</h4><p><strong><a href="http://nianxi.net" title="吴茜的博客" target="_blank" rel="external">http://nianxi.net</a></strong></p>
<h4 id="南峰子的博客：就职于百度"><a href="#南峰子的博客：就职于百度" class="headerlink" title="南峰子的博客：就职于百度"></a>南峰子的博客：就职于百度</h4><p><strong><a href="http://southpeak.github.io/" title="南峰子的博客" target="_blank" rel="external">http://southpeak.github.io/</a></strong></p>
<h4 id="叶孤城的博客：就职于百度"><a href="#叶孤城的博客：就职于百度" class="headerlink" title="叶孤城的博客：就职于百度"></a>叶孤城的博客：就职于百度</h4><p><strong><a href="http://www.jianshu.com/users/b82d2721ba07/latest_articles" title="叶孤城的博客" target="_blank" rel="external">http://www.jianshu.com/users/b82d2721ba07/latest_articles</a></strong></p>
<h4 id="JasonLee的博客："><a href="#JasonLee的博客：" class="headerlink" title="JasonLee的博客："></a>JasonLee的博客：</h4><p><strong><a href="http://blog.csdn.net/jasonblog" title="JasonLee的博客" target="_blank" rel="external">http://blog.csdn.net/jasonblog</a></strong></p>
<h4 id="ChenYilong的Github：就职于leancloud"><a href="#ChenYilong的Github：就职于leancloud" class="headerlink" title="ChenYilong的Github：就职于leancloud"></a>ChenYilong的Github：就职于leancloud</h4><p><strong><a href="https://github.com/ChenYilong" title="ChenYilong的Github" target="_blank" rel="external">https://github.com/ChenYilong</a></strong></p>
<hr>
<h4 id="pucker的博客：他的博客关于利用Autolayout界面自动布局系列的文章写的不错"><a href="#pucker的博客：他的博客关于利用Autolayout界面自动布局系列的文章写的不错" class="headerlink" title="pucker的博客：他的博客关于利用Autolayout界面自动布局系列的文章写的不错"></a>pucker的博客：他的博客关于利用Autolayout界面自动布局系列的文章写的不错</h4><p><strong><a href="http://blog.csdn.net/pucker" title="pucker的博客" target="_blank" rel="external">http://blog.csdn.net/pucker</a></strong></p>
<h4 id="Keegan-小钢的博客：组件化内容"><a href="#Keegan-小钢的博客：组件化内容" class="headerlink" title="Keegan 小钢的博客：组件化内容"></a>Keegan 小钢的博客：组件化内容</h4><p><strong><a href="http://keeganlee.me/archive" title="小钢的博客" target="_blank" rel="external">http://keeganlee.me/archive</a></strong></p>
<h4 id="董铂然的博客：就职于美团"><a href="#董铂然的博客：就职于美团" class="headerlink" title="董铂然的博客：就职于美团"></a>董铂然的博客：就职于美团</h4><p><strong><a href="http://www.cnblogs.com/dsxniubility/" title="董铂然的博客" target="_blank" rel="external">http://www.cnblogs.com/dsxniubility/</a></strong></p>
<h2 id="敬请关注我将持续更新"><a href="#敬请关注我将持续更新" class="headerlink" title="敬请关注我将持续更新"></a>敬请关注我将持续更新</h2><p><strong><a href="https://github.com/jingwanli6666/OpenResource" title="github地址" target="_blank" rel="external">github地址</a></strong></p>
<h4 id="喜欢star一下，谢谢！"><a href="#喜欢star一下，谢谢！" class="headerlink" title="喜欢star一下，谢谢！"></a>喜欢star一下，谢谢！</h4>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="李忠-limboy-来自蘑菇街，RAC实践的国内先驱者"><a href="#李忠-limboy-来自蘑菇街，RAC实践的国内先驱者" class="headerlink" title="李忠(limboy):来自蘑菇街，RAC实践的国内先驱者"></a>李忠(l]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[caffe--学习笔记]]></title>
    <link href="http://yoursite.com/2016/02/27/caffe-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/02/27/caffe-学习笔记/</id>
    <published>2016-02-27T13:53:40.000Z</published>
    <updated>2016-10-29T07:45:34.000Z</updated>
    <content type="html"><![CDATA[<h1 id="4个重要大类"><a href="#4个重要大类" class="headerlink" title="4个重要大类"></a>4个重要大类</h1><h3 id="Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。"><a href="#Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。" class="headerlink" title="Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。"></a>Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。</h3><h4 id="1-Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。"><a href="#1-Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。" class="headerlink" title="1. Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。"></a>1. Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。</h4><h4 id="2-Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。"><a href="#2-Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。" class="headerlink" title="2. Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。"></a>2. Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。</h4><h4 id="3-Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。"><a href="#3-Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。" class="headerlink" title="3. Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。"></a>3. Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。</h4><h4 id="4-Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。"><a href="#4-Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。" class="headerlink" title="4. Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。"></a>4. Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。</h4><p><img src="images/Caffe.png" alt="Caffe重要组件" title="Caffe重要组件"></p>
<p>caffe初学者，如有理解不对的地方请指出，谢谢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="4个重要大类"><a href="#4个重要大类" class="headerlink" title="4个重要大类"></a>4个重要大类</h1><h3 id="Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架]]>
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发之单例模式]]></title>
    <link href="http://yoursite.com/2015/10/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2015/10/25/iOS开发之单例/</id>
    <published>2015-10-25T15:16:52.000Z</published>
    <updated>2016-10-29T08:00:52.000Z</updated>
    <content type="html"><![CDATA[<p> iOS开发之单例</p>
<h1 id="单例介绍"><a href="#单例介绍" class="headerlink" title="单例介绍"></a>单例介绍</h1><h1 id="1-什么是单例"><a href="#1-什么是单例" class="headerlink" title="1.什么是单例"></a>1.什么是单例</h1><p>单例模式是一种常用的软件设计模式。在它的核心结构中包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果系统在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p>
<h1 id="2-单例用处"><a href="#2-单例用处" class="headerlink" title="2.单例用处"></a>2.单例用处</h1><p>应用场景：<br>确保程序运行期某个类，只有一份实例，用于进行资源共享控制。<br>优势：<br>使用简单，延时求值，易于跨模块<br>iOS的系统中用到的一些单例<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">UIApplication</span> sharedApplication];</div><div class="line">[<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line">[<span class="built_in">NSURLCache</span> sharedURLCache];</div></pre></td></tr></table></figure></p>
<h1 id="iOS单例的创建"><a href="#iOS单例的创建" class="headerlink" title="iOS单例的创建"></a>iOS单例的创建</h1><h2 id="1-单线程单例"><a href="#1-单线程单例" class="headerlink" title="1.单线程单例"></a>1.单线程单例</h2><p>单例类需要保证只有一个实例，因此在第一次访问这个实例的时候才创建，之后访问直接取已经创建好的实例<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> Singleton *singleteon;</div><div class="line">    <span class="keyword">if</span> (!singleteon ) &#123;</div><div class="line">	singleteon = [[Singleton alloc] init];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> singleteon;</div><div class="line">&#125;</div><div class="line">```	</div><div class="line">单线程单例存在一些弊端，在多线程的情况下，会产生线程不安全的情况。严格意义上来说，我们还需要把alloc方法变为私有方法才行，严格的单例是不允许再创建其他实例的，而alloc方法可以在外部任意生成实例。但是考虑到**alloc**属于<span class="built_in">NSObject</span>，iOS中无法将**alloc**变成私有方法，最多只能覆盖**alloc**让其返回空。不过个人不建议这么做，一般情况下对**alloc**不做特殊处理。系统的单例也未对**alloc**做任何处理</div><div class="line"><span class="meta">## 2.@synchronized单例</span></div><div class="line">上面单线程单例，在多线程情况下，可能会出现一些问题。如果两个线程同时调用**shareInstanc**,可能会创建出<span class="number">2</span>个singleton出来。所以在对多线程情况下，我们需要使用**@synchronize**来加锁</div><div class="line">``` objc</div><div class="line">+(<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> Singleton *singleton;</div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (!singleton) &#123;</div><div class="line">	    singleton = [[Singleton alloc] init];</div><div class="line">	&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">&#125;</div><div class="line">```	</div><div class="line">加锁以后，当多个线程同时调用shareInstance时，由于**<span class="keyword">@synchronized</span>**已经加锁，只能有一个线程创建singleton实例。这样就解决了多线程调用单例的问题。</div><div class="line"><span class="meta">## 3.dispatch_once单例</span></div><div class="line">使用**<span class="keyword">@synchronized</span>**虽然一定程度上解决了多线程的问题，但并不完美。因为只有在**singleton**未创建时，加锁才是必要的。如果**singleton**已经创建，这个时候还加锁的话，会影响性能。</div><div class="line">在iOS中，GCD为我们提供方便又高效的方法---**<span class="built_in">dispatch_once</span>**</div><div class="line">``` objc</div><div class="line">+(<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> Singleton *singleton;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;  <span class="comment">//1.onceToken = 0;</span></div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken,^&#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,onceToken);       <span class="comment">//2.onceToken = 140734537148864</span></div><div class="line">	singleton = [[Singleton alloc] init];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,onceToken);   <span class="comment">//3.onceToken = -1</span></div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>dispatch_once</strong>为什么能做到既解决同步多线程问题</p>
<p><strong>dispatch_once</strong>的原理：<br><strong>dispatch_once</strong>主要是根据<strong>onceToken</strong>的值来决定怎么去执行代码。<br>1.当<strong>onceToken</strong> = 0时，线程执行<strong>dispatch_once</strong>的<strong>block</strong>中代码<br>2.当<strong>onceToken</strong> = -1时，线程跳过<strong>dispatch_once</strong>的<strong>block</strong>中代码不执行<br>3.当<strong>onceToken</strong>为其他值时，线程被阻塞，等待<strong>onceToken</strong>值改变<br>当线程调用<strong>shareInstance</strong>,此时<strong>onceToken</strong> = 0，调用<strong>block</strong>中的代码，此时<strong>onceToken</strong>的值变为140734537148864。当其他线程再调用<strong>shareInstance</strong>方法时，<strong>onceToken</strong>的值已经是140734537148864了，线程阻塞。当<strong>block</strong>线程执行完<strong>block</strong>之后，<strong>onceToken</strong>变为-1.其他线程不再阻塞，跳过<strong>block</strong>。下次再调用<strong>shareInstance</strong>时，block已经为-1.直接跳过<strong>block</strong>。<br><strong>dispatch_once</strong>设计挺巧妙的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> iOS开发之单例</p>
<h1 id="单例介绍"><a href="#单例介绍" class="headerlink" title="单例介绍"></a>单例介绍</h1><h1 id="1-什么是单例"><a href="#1-什么是单例" class="heade]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
</feed>
