<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[勤能补拙]]></title>
  <subtitle><![CDATA[生活不易，且行且珍惜]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-10-26T03:16:52.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[jasonjwl]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[自动打包.md]]></title>
    <link href="http://yoursite.com/2016/10/26/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2016/10/26/自动打包/</id>
    <published>2016-10-26T03:16:52.000Z</published>
    <updated>2016-10-26T03:16:52.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[国内iOS牛人博客]]></title>
    <link href="http://yoursite.com/2016/04/25/%E5%9B%BD%E5%86%85iOS%E7%89%9B%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/04/25/国内iOS牛人博客/</id>
    <published>2016-04-25T15:16:52.000Z</published>
    <updated>2016-10-28T08:59:24.000Z</updated>
    <content type="html"><![CDATA[<p>####李忠(limboy):来自蘑菇街，RAC实践的国内先驱者</p>
<p><strong><a href="">http://limboy.me/</a></strong></p>
<p>####Bang的博客：目前就职于腾讯，JSPatch作者<br><strong><a href="">http://blog.cnbang.net/</a></strong></p>
<p>####王巍的博客：王巍目前在日本横滨任职于LINE。工作内容主要进行Unity3D开发和iOS开发。他维护Swift使用技巧分享网站Swifter.tips,他的陈列柜中已有多款应用，其中番茄工作法工具非常棒。<br><strong><a href="">http://onevcat.com</a></strong></p>
<p>####池建强的博客： 池建强，70后程序员，Blogger。98年毕业，先后就职于洪恩软件、RocketSofeware和用友软件工程公司（后更名为瑞友科技），现任瑞友科技IT应用研究院副院长。该博客最初每天发送一条Mac技巧，不过目前已经形成了一种技术和人文结合的风格，时而随笔，时而技术。</p>
<p><strong><a href="">http://macshuo.com/</a></strong></p>
<p>####唐巧的博客： 唐巧是前网易有道员工，现在在猿题库创业中，负责iOS端的开发，首届国内Swift开发者大会的组织者。</p>
<p><strong><a href="">http://blog.devtang.com/</a></strong></p>
<hr>
<p>####许小帅的博客：许小帅目前任职于腾讯，他还是iOS Feed站点的负责人。博客中对支付宝钱包插件分析的文章，引起了支付宝开发团队的反思，大家可以去感受一下。</p>
<p><strong><a href="">http://imallen.com/</a></strong></p>
<p>####蓝晨钰的博客：晨钰就职于猿题库。</p>
<p><strong><a href="">http://gracelancy.com/</a></strong></p>
<p>####萧宸宇的博客：萧宸宇目前任职于Sumi Interactive。他出生于西南一个边陲小镇，梦想着能走出家乡，看看祖国的大好河山。他拥有丰富的 iOS 开发经验，在他的博客中发表了许多 iOS 开发的文章。</p>
<p><strong><a href="">http://iiiyu.com/</a></strong></p>
<p>####陶丰平的博客：陶丰平目前任职于花瓣网，喜欢技术，喜欢音乐。他在软件开发领域有丰富的开发经验。</p>
<p><strong><a href="">http://www.taofengping.com/</a></strong></p>
<p>####ibireme的博客：YYKit作者 曾就职于优酷土豆,先就职于滴滴</p>
<p><strong><a href="">http://blog.ibireme.com</a></strong></p>
<hr>
<p>####乔学士的博客：乔学士目前任职于创业公司拓词，他正在为成为“代码手工艺人”而努力，目前主要进行 iOS 开发。最近他做得非常精彩的一件事就是汇总了WWDC 2013 视频英文字幕下载，大家可以前往他的博客感受一下。</p>
<p><strong><a href="">http://joeyio.com/</a></strong></p>
<p>####破船的博客：破船在移动领域摸爬滚打多年，经历了Symbian、Windows Mobile、Windows Phone和 iOS 等的洗礼。他希望能充分利用业余时间，努力做一名伪步道师。</p>
<p><strong><a href="">http://beyondvincent.com/</a></strong></p>
<p>####陈咏聪的博客：陈咏聪现任职于百度，从事 iOS 相关开发。他热爱Web事业，关注设计、产品、开发。沉迷代码，无法自拔。</p>
<p><strong><a href="">http://vinqon.com/</a></strong></p>
<p>####骆仕恺的博客：骆仕恺目前任职于爱折客 / 爱美味。他主要从事 iOS 和Java开发。拥有丰富的 iOS 开发经验。</p>
<p><strong><a href="">http://luosky.com/</a></strong></p>
<p>####耿健桓的博客：耿健桓目前在清华大学攻读硕士，之前他是著名站点知乎的 iOS 技术主管。</p>
<p><strong><a href="">http://dlog.dismory.com/</a></strong></p>
<hr>
<p>####李择一的博客：李择一目前任职于百度，他在移动开发领域积累了丰富的经验，特别是 iOS 开发关于OC中block的追究非常有深度</p>
<p><strong><a href="">http://cnblogs.com/biosli</a></strong></p>
<p>####王轲的博客：王轲是一名 iOS 独立开发者，也是IndieBros Studio创始人。在博客中有几篇关于 iOS 性能优化的文章，值得大家去看看。</p>
<p><strong><a href="">http://www.iwangke.me/</a></strong></p>
<p>####杨宇建的博客： 杨宇建目前任职于载信软件。在他的博客中有许多 iOS 开发的文章，都是干货。</p>
<p><strong><a href="">http://www.cnblogs.com/easonoutlook/</a></strong></p>
<p>####连栩的博客： 连栩目前工作在加拿大温哥华，运营着自己的公司 Beyondcow，他是一名 OSX、iOS 程序员同时也是用户体验，交互界面设计师。在开发的软件 Miao 是一款全功能 Mac 微博客户端。他的博客中有许多Cocoa开发的文章，值得大家去品读。</p>
<p><strong><a href="">http://lianxu.me/</a></strong></p>
<p>####高嘉峻的博客：高嘉峻目前任职于天猫。是一名资深80后，号称会写代码的猪。最近他的博客中出现了两篇关于iOS中单元测试的文章，非常棒。<br><strong><a href="">http://jiajun.org/</a></strong></p>
<hr>
<p>####webfrogs的博客：目前在北京当一枚程序猿，有幸成为80后的尾巴。目前行走在iOS开发的道路上，用博客记载一路上的所见所闻所想。</p>
<p><strong><a href="">http://webfrogs.me/</a></strong></p>
<p>####sunny的博客：现就职于北京滴滴，喜欢研究底层的东西，对runtime有深刻讲解，值得大家学习</p>
<p><strong><a href="">http://blog.sunnyxx.com</a></strong></p>
<p>####景总的博客：目前任职于天猫国际移动开发CTO，曾就职于平安科技项目经理，对IM和APP性能优化有深刻见解</p>
<p><strong><a href="">http://blog.csdn.net/justinjing0612</a></strong></p>
<p>####谭灏的博客：目前就职于腾讯mac管家部门，他是一名 OSX、iOS 程序员，他的博客中有许多mac，ios开发的文章，值得大家去品读</p>
<p><strong><a href="">http://tanhao.me/</a></strong></p>
<p>####田伟宇的博客：目前任职于天猫，全能人才。最近他的博客中出现了篇关于iOS应用架构详谈的文章，非常棒。</p>
<p><strong><a href="">http://casatwy.com</a></strong></p>
<hr>
<p>####吴茜的博客：目前就职阿里旗下蚂蚁金服，ios界女神，Qt、Android高级开发工程师,eoe优亿认证开发者，ios反编译大师，著作ios安全攻防</p>
<p><strong><a href="">http://nianxi.net</a></strong></p>
<p>####南峰子的博客：就职于百度</p>
<p><strong><a href="">http://southpeak.github.io/</a></strong></p>
<p>####叶孤城的博客：就职于百度</p>
<p><strong><a href="">http://www.jianshu.com/users/b82d2721ba07/latest_articles</a></strong></p>
<p>####JasonLee的博客：</p>
<p><strong><a href="">http://blog.csdn.net/jasonblog</a></strong></p>
<p>####ChenYilong的Github：就职于leancloud</p>
<p><strong><a href="">https://github.com/ChenYilong</a></strong></p>
<hr>
<p>####pucker的博客：他的博客关于利用Autolayout界面自动布局系列的文章写的不错</p>
<p><strong><a href="">http://blog.csdn.net/pucker</a></strong></p>
<p>####Keegan 小钢的博客：组件化内容<br><strong><a href="">http://keeganlee.me/archive</a></strong></p>
<p>####董铂然的博客：就职于美团<br><strong><a href="">http://www.cnblogs.com/dsxniubility/</a></strong></p>
<h2 id="敬请关注我将持续更新"><a href="#敬请关注我将持续更新" class="headerlink" title="敬请关注我将持续更新"></a>敬请关注我将持续更新</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>####李忠(limboy):来自蘑菇街，RAC实践的国内先驱者</p>
<p><strong><a href="">http://limboy.me/</a></strong></p>
<p>####Bang的博客：目前就职于腾讯，JSPatch作者<br><strong]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[caffe--学习笔记]]></title>
    <link href="http://yoursite.com/2016/02/27/caffe-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/02/27/caffe-学习笔记/</id>
    <published>2016-02-27T13:53:40.000Z</published>
    <updated>2016-10-27T15:30:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="4个重要大类"><a href="#4个重要大类" class="headerlink" title="4个重要大类"></a>4个重要大类</h1><h3 id="Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。"><a href="#Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。" class="headerlink" title="Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。"></a>Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架与参数求解策略。</h3><h4 id="1-Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。"><a href="#1-Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。" class="headerlink" title="1. Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。"></a>1. Blob：数据层的数据结构，数据传输的媒介，神经网络的输入输出数据，网络权重参数等等都是用Blob进行存储。</h4><h4 id="2-Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。"><a href="#2-Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。" class="headerlink" title="2. Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。"></a>2. Layer：神经网络的基础单元，层与层间的数据节点、前后传递都在该数据结构中被实现。它包括卷积层、激励层、池化层、全连接层等。</h4><h4 id="3-Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。"><a href="#3-Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。" class="headerlink" title="3. Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。"></a>3. Net：是网络的整体搭建骨架，整合Layer中的层级机构组成的网络。</h4><h4 id="4-Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。"><a href="#4-Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。" class="headerlink" title="4. Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。"></a>4. Solver：网络求解优化策略，让你用各种“积木”搭建的网络能最适应当前的场景的样本。</h4><p><img src="images/Caffe.png" alt="Caffe重要组件" title="Caffe重要组件"></p>
<p>caffe初学者，如有理解不对的地方请指出，谢谢！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="4个重要大类"><a href="#4个重要大类" class="headerlink" title="4个重要大类"></a>4个重要大类</h1><h3 id="Blob、Layer、Net、Solver自上而下，欢欢相扣，分别负责数据传输、网络层次、网络骨架]]>
    </summary>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发之单例模式]]></title>
    <link href="http://yoursite.com/2015/10/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2015/10/25/iOS开发之单例/</id>
    <published>2015-10-25T15:16:52.000Z</published>
    <updated>2016-10-27T13:52:39.000Z</updated>
    <content type="html"><![CDATA[<p> iOS开发之单例</p>
<h1 id="单例介绍"><a href="#单例介绍" class="headerlink" title="单例介绍"></a>单例介绍</h1><h1 id="1-什么是单例"><a href="#1-什么是单例" class="headerlink" title="1.什么是单例"></a>1.什么是单例</h1><p>单例模式是一种常用的软件设计模式。在它的核心结构中包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果系统在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p>
<h1 id="2-单例用处"><a href="#2-单例用处" class="headerlink" title="2.单例用处"></a>2.单例用处</h1><p>应用场景：<br>确保程序运行期某个类，只有一份实例，用于进行资源共享控制。<br>优势：<br>使用简单，延时求值，易于跨模块<br>iOS的系统中用到的一些单例<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">UIApplication</span> sharedApplication];</div><div class="line">[<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line">[<span class="built_in">NSURLCache</span> sharedURLCache];</div></pre></td></tr></table></figure></p>
<h1 id="iOS单例的创建"><a href="#iOS单例的创建" class="headerlink" title="iOS单例的创建"></a>iOS单例的创建</h1><h2 id="1-单线程单例"><a href="#1-单线程单例" class="headerlink" title="1.单线程单例"></a>1.单线程单例</h2><p>单例类需要保证只有一个实例，因此在第一次访问这个实例的时候才创建，之后访问直接取已经创建好的实例<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> Singleton *singleteon;</div><div class="line">    <span class="keyword">if</span> (!singleteon ) &#123;</div><div class="line">	singleteon = [[Singleton alloc] init];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> singleteon;</div><div class="line">&#125;</div><div class="line">```	</div><div class="line">单线程单例存在一些弊端，在多线程的情况下，会产生线程不安全的情况。严格意义上来说，我们还需要把alloc方法变为私有方法才行，严格的单例是不允许再创建其他实例的，而alloc方法可以在外部任意生成实例。但是考虑到**alloc**属于<span class="built_in">NSObject</span>，iOS中无法将**alloc**变成私有方法，最多只能覆盖**alloc**让其返回空。不过个人不建议这么做，一般情况下对**alloc**不做特殊处理。系统的单例也未对**alloc**做任何处理</div><div class="line"><span class="meta">## 2.@synchronized单例</span></div><div class="line">上面单线程单例，在多线程情况下，可能会出现一些问题。如果两个线程同时调用**shareInstanc**,可能会创建出<span class="number">2</span>个singleton出来。所以在对多线程情况下，我们需要使用**@synchronize**来加锁</div><div class="line">``` objc</div><div class="line">+(<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> Singleton *singleton;</div><div class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">	<span class="keyword">if</span> (!singleton) &#123;</div><div class="line">	    singleton = [[Singleton alloc] init];</div><div class="line">	&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">&#125;</div><div class="line">```	</div><div class="line">加锁以后，当多个线程同时调用shareInstance时，由于**<span class="keyword">@synchronized</span>**已经加锁，只能有一个线程创建singleton实例。这样就解决了多线程调用单例的问题。</div><div class="line"><span class="meta">## 3.dispatch_once单例</span></div><div class="line">使用**<span class="keyword">@synchronized</span>**虽然一定程度上解决了多线程的问题，但并不完美。因为只有在**singleton**未创建时，加锁才是必要的。如果**singleton**已经创建，这个时候还加锁的话，会影响性能。</div><div class="line">在iOS中，GCD为我们提供方便又高效的方法---**<span class="built_in">dispatch_once</span>**</div><div class="line">``` objc</div><div class="line">+(<span class="keyword">instancetype</span>)shareInstance</div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> Singleton *singleton;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;  <span class="comment">//1.onceToken = 0;</span></div><div class="line">    </div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken,^&#123;</div><div class="line">	<span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,onceToken);       <span class="comment">//2.onceToken = 140734537148864</span></div><div class="line">	singleton = [[Singleton alloc] init];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,onceToken);   <span class="comment">//3.onceToken = -1</span></div><div class="line">    <span class="keyword">return</span> singleton;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>dispatch_once</strong>为什么能做到既解决同步多线程问题</p>
<p><strong>dispatch_once</strong>的原理：<br><strong>dispatch_once</strong>主要是根据<strong>onceToken</strong>的值来决定怎么去执行代码。<br>1.当<strong>onceToken</strong> = 0时，线程执行<strong>dispatch_once</strong>的<strong>block</strong>中代码<br>2.当<strong>onceToken</strong> = -1时，线程跳过<strong>dispatch_once</strong>的<strong>block</strong>中代码不执行<br>3.当<strong>onceToken</strong>为其他值时，线程被阻塞，等待<strong>onceToken</strong>值改变<br>当线程调用<strong>shareInstance</strong>,此时<strong>onceToken</strong> = 0，调用<strong>block</strong>中的代码，此时<strong>onceToken</strong>的值变为140734537148864。当其他线程再调用<strong>shareInstance</strong>方法时，<strong>onceToken</strong>的值已经是140734537148864了，线程阻塞。当<strong>block</strong>线程执行完<strong>block</strong>之后，<strong>onceToken</strong>变为-1.其他线程不再阻塞，跳过<strong>block</strong>。下次再调用<strong>shareInstance</strong>时，block已经为-1.直接跳过<strong>block</strong>。<br><strong>dispatch_once</strong>设计挺巧妙的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> iOS开发之单例</p>
<h1 id="单例介绍"><a href="#单例介绍" class="headerlink" title="单例介绍"></a>单例介绍</h1><h1 id="1-什么是单例"><a href="#1-什么是单例" class="heade]]>
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
</feed>
