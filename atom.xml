<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[勤能补拙]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-10-25T14:38:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[jasonjwl]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[单例]]></title>
    <link href="http://yoursite.com/2016/10/25/%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/10/25/单例/</id>
    <published>2016-10-25T14:37:42.000Z</published>
    <updated>2016-10-25T14:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>#iOS开发之单例</p>
<p>#单例介绍</p>
<p>#1.什么是单例<br>单例模式是一种常用的软件设计模式。在它的核心结构中包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果系统在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p>
<p>#2.单例用处<br>应用场景：<br>确保程序运行期某个类，只有一份实例，用于进行资源共享控制。<br>优势：<br>使用简单，延时求值，易于跨模块</p>
<p>iOS的系统中用到的一些单例</p>
<pre><code>[UIApplication sharedApplication];
[NSUserDefaults standardUserDefaults];
[NSURLCache sharedURLCache];
</code></pre><p>#iOS单例的创建</p>
<p>##1.单线程单例<br>单例类需要保证只有一个实例，因此在第一次访问这个实例的时候才创建，之后访问直接取已经创建好的实例</p>
<pre><code>+(instancetype)shareInstance
{
    static Singleton *singleteon;
    if (!singleteon ) {
        singleteon = [[Singleton alloc] init];
    }
    return singleteon;
}
</code></pre><p>单线程单例存在一些弊端，在多线程的情况下，会产生线程不安全的情况。严格意义上来说，我们还需要把alloc方法变为私有方法才行，严格的单例是不允许再创建其他实例的，而alloc方法可以在外部任意生成实例。但是考虑到<strong>alloc</strong>属于NSObject，iOS中无法将<strong>alloc</strong>变成私有方法，最多只能覆盖<strong>alloc</strong>让其返回空。不过个人不建议这么做，一般情况下对<strong>alloc</strong>不做特殊处理。系统的单例也未对<strong>alloc</strong>做任何处理</p>
<p>##2.@synchronized单例<br>上面单线程单例，在多线程情况下，可能会出现一些问题。如果两个线程同时调用<strong>shareInstanc</strong>,可能会创建出2个singleton出来。所以在对多线程情况下，我们需要使用<strong>@synchronize</strong>来加锁</p>
<pre><code>+(instancetype)shareInstance
{
    static Singleton *singleton;
    @synchronized (self) {
        if (!singleton) {
            singleton = [[Singleton alloc] init];
        }
    }
    return singleton;
}
</code></pre><p>加锁以后，当多个线程同时调用shareInstance时，由于<strong>@synchronized</strong>已经加锁，只能有一个线程创建singleton实例。这样就解决了多线程调用单例的问题。</p>
<p>##3.dispatch_once单例<br>使用<strong>@synchronized</strong>虽然一定程度上解决了多线程的问题，但并不完美。因为只有在<strong>singleton</strong>未创建时，加锁才是必要的。如果<strong>singleton</strong>已经创建，这个时候还加锁的话，会影响性能。<br>在iOS中，GCD为我们提供方便又高效的方法—<strong>dispatch_once</strong></p>
<pre><code>+(instancetype)shareInstance
{
    static Singleton *singleton;
    static dispatch_once_t onceToken;  //1.onceToken = 0;

    dispatch_once(&amp;onceToken,^{
        NSLog(@&quot;%ld&quot;,onceToken);       //2.onceToken = 140734537148864
        singleton = [[Singleton alloc] init];
    });

    NSLog(@&quot;%ld&quot;,onceToken);   //3.onceToken = -1
    return singleton;
}
</code></pre><p><strong>dispatch_once</strong>为什么能做到既解决同步多线程问题</p>
<p><strong>dispatch_once</strong>的原理：<br><strong>dispatch_once</strong>主要是根据<strong>onceToken</strong>的值来决定怎么去执行代码。<br>1.当<strong>onceToken</strong> = 0时，线程执行<strong>dispatch_once</strong>的<strong>block</strong>中代码<br>2.当<strong>onceToken</strong> = -1时，线程跳过<strong>dispatch_once</strong>的<strong>block</strong>中代码不执行<br>3.当<strong>onceToken</strong>为其他值时，线程被阻塞，等待<strong>onceToken</strong>值改变<br>当线程调用<strong>shareInstance</strong>,此时<strong>onceToken</strong> = 0，调用<strong>block</strong>中的代码，此时<strong>onceToken</strong>的值变为140734537148864。当其他线程再调用<strong>shareInstance</strong>方法时，<strong>onceToken</strong>的值已经是140734537148864了，线程阻塞。当<strong>block</strong>线程执行完<strong>block</strong>之后，<strong>onceToken</strong>变为-1.其他线程不再阻塞，跳过<strong>block</strong>。下次再调用<strong>shareInstance</strong>时，block已经为-1.直接跳过<strong>block</strong>。<br><strong>dispatch_once</strong>设计挺巧妙的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#iOS开发之单例</p>
<p>#单例介绍</p>
<p>#1.什么是单例<br>单例模式是一种常用的软件设计模式。在它的核心结构中包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/10/25/iOS%E5%BC%80%E5%8F%91%E4%B9%8B%E5%8D%95%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/10/25/iOS开发之单例/</id>
    <published>2016-10-25T14:27:02.000Z</published>
    <updated>2016-10-25T14:27:02.000Z</updated>
    <content type="html"><![CDATA[<p>#iOS开发之单例</p>
<p>#单例介绍</p>
<p>#1.什么是单例<br>单例模式是一种常用的软件设计模式。在它的核心结构中包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果系统在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。</p>
<p>#2.单例用处<br>应用场景：<br>确保程序运行期某个类，只有一份实例，用于进行资源共享控制。<br>优势：<br>使用简单，延时求值，易于跨模块</p>
<p>iOS的系统中用到的一些单例</p>
<pre><code>[UIApplication sharedApplication];
[NSUserDefaults standardUserDefaults];
[NSURLCache sharedURLCache];
</code></pre><p>#iOS单例的创建</p>
<p>##1.单线程单例<br>单例类需要保证只有一个实例，因此在第一次访问这个实例的时候才创建，之后访问直接取已经创建好的实例</p>
<pre><code>+(instancetype)shareInstance
{
    static Singleton *singleteon;
    if (!singleteon ) {
        singleteon = [[Singleton alloc] init];
    }
    return singleteon;
}
</code></pre><p>单线程单例存在一些弊端，在多线程的情况下，会产生线程不安全的情况。严格意义上来说，我们还需要把alloc方法变为私有方法才行，严格的单例是不允许再创建其他实例的，而alloc方法可以在外部任意生成实例。但是考虑到<strong>alloc</strong>属于NSObject，iOS中无法将<strong>alloc</strong>变成私有方法，最多只能覆盖<strong>alloc</strong>让其返回空。不过个人不建议这么做，一般情况下对<strong>alloc</strong>不做特殊处理。系统的单例也未对<strong>alloc</strong>做任何处理</p>
<p>##2.@synchronized单例<br>上面单线程单例，在多线程情况下，可能会出现一些问题。如果两个线程同时调用<strong>shareInstanc</strong>,可能会创建出2个singleton出来。所以在对多线程情况下，我们需要使用<strong>@synchronize</strong>来加锁</p>
<pre><code>+(instancetype)shareInstance
{
    static Singleton *singleton;
    @synchronized (self) {
        if (!singleton) {
            singleton = [[Singleton alloc] init];
        }
    }
    return singleton;
}
</code></pre><p>加锁以后，当多个线程同时调用shareInstance时，由于<strong>@synchronized</strong>已经加锁，只能有一个线程创建singleton实例。这样就解决了多线程调用单例的问题。</p>
<p>##3.dispatch_once单例<br>使用<strong>@synchronized</strong>虽然一定程度上解决了多线程的问题，但并不完美。因为只有在<strong>singleton</strong>未创建时，加锁才是必要的。如果<strong>singleton</strong>已经创建，这个时候还加锁的话，会影响性能。<br>在iOS中，GCD为我们提供方便又高效的方法—<strong>dispatch_once</strong></p>
<pre><code>+(instancetype)shareInstance
{
    static Singleton *singleton;
    static dispatch_once_t onceToken;  //1.onceToken = 0;

    dispatch_once(&amp;onceToken,^{
        NSLog(@&quot;%ld&quot;,onceToken);       //2.onceToken = 140734537148864
        singleton = [[Singleton alloc] init];
    });

    NSLog(@&quot;%ld&quot;,onceToken);   //3.onceToken = -1
    return singleton;
}
</code></pre><p><strong>dispatch_once</strong>为什么能做到既解决同步多线程问题</p>
<p><strong>dispatch_once</strong>的原理：<br><strong>dispatch_once</strong>主要是根据<strong>onceToken</strong>的值来决定怎么去执行代码。<br>1.当<strong>onceToken</strong> = 0时，线程执行<strong>dispatch_once</strong>的<strong>block</strong>中代码<br>2.当<strong>onceToken</strong> = -1时，线程跳过<strong>dispatch_once</strong>的<strong>block</strong>中代码不执行<br>3.当<strong>onceToken</strong>为其他值时，线程被阻塞，等待<strong>onceToken</strong>值改变<br>当线程调用<strong>shareInstance</strong>,此时<strong>onceToken</strong> = 0，调用<strong>block</strong>中的代码，此时<strong>onceToken</strong>的值变为140734537148864。当其他线程再调用<strong>shareInstance</strong>方法时，<strong>onceToken</strong>的值已经是140734537148864了，线程阻塞。当<strong>block</strong>线程执行完<strong>block</strong>之后，<strong>onceToken</strong>变为-1.其他线程不再阻塞，跳过<strong>block</strong>。下次再调用<strong>shareInstance</strong>时，block已经为-1.直接跳过<strong>block</strong>。<br><strong>dispatch_once</strong>设计挺巧妙的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>#iOS开发之单例</p>
<p>#单例介绍</p>
<p>#1.什么是单例<br>单例模式是一种常用的软件设计模式。在它的核心结构中包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/10/23/hello-world/"/>
    <id>http://yoursite.com/2016/10/23/hello-world/</id>
    <published>2016-10-23T14:24:16.000Z</published>
    <updated>2016-10-23T14:24:16.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.]]>
    </summary>
    
  </entry>
  
</feed>
